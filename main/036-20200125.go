package main

func isValidSudoku(board [][]byte) bool {
	lines := make([][]byte, 9)
	columns := make([][]byte, 9)
	cubes := make([][]byte, 9)
	for i := 0; i < 9; i++ {
		lines[i] = make([]byte, 9)
		columns[i] = make([]byte, 9)
		cubes[i] = make([]byte, 9)
	}

	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if board[i][j] == '.' {
				continue
			}
			n := board[i][j] - '1'

			if lines[i][n] != 0 || columns[j][n] != 0 || cubes[i/3+(j/3)*3][n] != 0 {
				// fmt.Println(false)
				return false
			}
			lines[i][n] = 1
			columns[j][n] = 1
			cubes[i/3+(j/3)*3][n] = 1
		}
	}
	// fmt.Println(true)
	return true
}

// func main() {
// 	isValidSudoku([][]byte{
// 		[]byte{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
// 		[]byte{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
// 		[]byte{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
// 		[]byte{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
// 		[]byte{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
// 		[]byte{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
// 		[]byte{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
// 		[]byte{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
// 		[]byte{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
// 	})
// 	isValidSudoku([][]byte{
// 		[]byte{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
// 		[]byte{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
// 		[]byte{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
// 		[]byte{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
// 		[]byte{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
// 		[]byte{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
// 		[]byte{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
// 		[]byte{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
// 		[]byte{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
// 	})
// }
